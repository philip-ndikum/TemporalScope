[build-system]
requires = ["hatchling>=1.8.0"]
build-backend = "hatchling.build"

[project]
name = "temporalscope"
dynamic = ["version"]
description = "TemporalScope: Model-Agnostic Temporal Feature Importance Analysis."
authors = [
    { name = "Philip Ndikum", email = "philip-ndikum@users.noreply.github.com" },
    { name = "Serge Ndikum" },
    { name = "Kane Norman" },
]
license = "Apache-2.0"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "shap>=0.46.0",
    "borutashap>=1.0.17",
    "scikit-learn>=1.5.1",
    "polars>=1.5.0",
    "statsmodels>=0.14.2",
    "pyarrow>=17.0.0",
    "lightgbm>=4.5.0",
    "flax>=0.8.5",
    "jax>=0.4.31",
    "modin[all]>=0.31.0",
    "python-dotenv>=1.0.1",
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = [
    "Shap",
    "Borutashap",
    "Feature-Importance",
    "Temporal-Feature-Importance",
    "Temporal-Feature-Analysis",
    "XAI",
    "ML",
    "AI",
    "Machine-Learning",
    "Artificial-Intelligence",
    "TemporalScope",
    "Time-Series",
]

[project.urls]
"Source code" = "https://github.com/philip-ndikum/TemporalScope"
Documentation = "https://temporalscope.readthedocs.io/en/latest/"

[tool.hatch.envs.default]
dependencies = [
    "pre-commit",
    "ruff",
    "jupyterlab",
    "notebook",
    "commitizen==3.29.0",
    "mypy",               # Include dependencies for QA scripts
    "bandit",             # Include dependencies for QA scripts
    "black",              # Include dependencies for QA scripts
    "pytest",             # Include pytest for running tests
    "pytest-cov",         # Include pytest-cov for coverage if needed
    "docformatter",       # Add docformatter for docstring formatting
    "commitizen",
]

[tool.hatch.envs.docs]
dependencies = [
    "pydata-sphinx-theme",
    "myst-parser",
    "sphinx >=4.0",
    "sphinx-copybutton",
    "sphinx-autodoc-typehints",
    "sphinx-autodoc-annotation",
    'sphinx-autoapi',
]

[tool.hatch.envs.docs.scripts]
build = "sphinx-build -WTb html . _build"
readthedocs = "sphinx-build -WTb html . $READTHEDOCS_OUTPUT/html"
serve = "python -m http.server --directory _build"

[tool.hatch.envs.test]
extra-dependencies = ["pytest", "pytest-cov", "pytest-custom_exit_code", "pytest-mock"]

[tool.hatch.envs.test.scripts]
unit = 'pytest --cov-report xml:coverage.xml --cov="temporalscope" -m "not integration" {args:test}'
integration = 'pytest --cov-report xml:coverage.xml --cov="temporalscope" -m "integration" {args:test}'

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-v -ra -q"
log_cli = true
log_cli_level = "INFO"
log_format = "[%(asctime)s][%(levelname)s] %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"
minversion = "6.0"
filterwarnings = "ignore"

[tool.black]
line-length = 120  # Set Black's line length to 120 for consistency

[tool.ruff]
extend-exclude = ["*.pyc", "test/*", "tutorial_notebooks/*"]
target-version = "py310"
line-length = 120  # Consistent line length across all tools

[tool.ruff.lint]
select = [
    "C4",   # flake8-comprehensions
    "C90",  # McCabe cyclomatic complexity
    "E501", # Long lines
    "EXE",  # flake8-executable
    "F",    # Pyflakes
    "INT",  # flake8-gettext
    "PERF", # Perflint
    "PL",   # Pylint
    "Q",    # flake8-quotes
    "SIM",  # flake8-simplify
    "SLOT", # flake8-slots
    "T10",  # flake8-debugger
    "W",    # pycodestyle
    "YTT",  # flake8-2020
    "I",    # isort
    # built-in shadowing
    "A001", # builtin-variable-shadowing
    "A002", # builtin-argument-shadowing
    "A003", # builtin-attribute-shadowing
    # docstring rules
    "D", # flake8-docstrings
]

ignore = [
    "D400",  # Ignore "First line should end with a period" for docstrings.
    "D401",  # Ignore "First line should be in imperative mood" for docstrings.
    "D415",  # Ignore "First line should end with a period, question mark, or exclamation point."
    "E501",  # Ignore "Line too long" in docstrings/comments for exceeding 120 characters.
    "PERF203", # `try`-`except` within a loop incurs performance overhead
    "PERF401", # Use a list comprehension to create a transformed list
    "PLR1714", # repeated-equality-comparison
    "PLR5501", # collapsible-else-if
    "PLW2901", # redefined-loop-name
    "SIM108",  # if-else-block-instead-of-if-exp
    "PLR0913", # too many arguments
    "SIM102",  # temporary
    "C901",    # temporary
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
    "D211",    # No blank lines allowed before class docstring
    "D213",    # Multi-line docstring summary should start at the second line
    "D203",    # 1 blank line required before class docstring
]

[tool.ruff.lint.per-file-ignores]
"docs/conf.py" = ["A001", "D103"]

[tool.mypy]
files = "src/temporalscope"
python_version = "3.10"
ignore_missing_imports = true
warn_unreachable = true
exclude = 'test/*'
warn_return_any = false      # Turn off MyPy warnings for missing return types

[tool.bandit]
exclude_dirs = ["test"]

[tool.hatch.build.targets.wheel]
packages = ["src/temporalscope"]

[tool.hatch.build.targets.sdist]
include = ["/src", "/VERSION.txt"]

[tool.hatch.version]
path = "VERSION.txt"
pattern = "(?P<version>.+)"

[tool.hatch.envs.default.scripts]
check = "ruff check {args}"
fix = "ruff check --fix"
format = "ruff format {args}"
format-check = "ruff format --check {args}"
docformat = """
docformatter --check --recursive --wrap-summaries 120 --wrap-descriptions 120 src/temporalscope || \
docformatter --in-place --recursive --wrap-summaries 120 --wrap-descriptions 120 src/temporalscope
"""
clear-coverage = "coverage erase"
# Automated developer Q&A script
quality-assurance = """
pytest &&
docformatter --check --recursive --wrap-summaries 120 --wrap-descriptions 120 src/temporalscope || \
docformatter --in-place --recursive --wrap-summaries 120 --wrap-descriptions 120 src/temporalscope
ruff check src/temporalscope --output-format=full --show-files --show-fixes &&
mypy src/temporalscope --ignore-missing-imports --show-error-codes --warn-unreachable &&
bandit -r src/temporalscope
"""
generate-kernel = """
python -m ipykernel install --user --name temporalscope-kernel --display-name "TemporalScope"
echo "Jupyter kernel 'TemporalScope' created. You can now use it in Jupyter notebooks."
"""

[tool.commitizen]
version = "0.1.0"
update_changelog_on_bump = true
tag_format = "v$version"
version_files = ["pyproject.toml:version", "VERSION.txt"]

[tool.hatch.metadata]
allow-direct-references = true
